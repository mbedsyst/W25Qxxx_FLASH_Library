
FLASH_W25Q64.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000558  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080006ec  080006ec  000016ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000738  08000738  00001740  2**0
                  CONTENTS
  4 .ARM          00000000  08000738  08000738  00001740  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000738  08000740  00001740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000738  08000738  00001738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800073c  0800073c  0000173c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000740  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000740  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011e4  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000065b  00000000  00000000  00002954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  00002fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000116  00000000  00000000  00003150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e20f  00000000  00000000  00003266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002364  00000000  00000000  00011475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fe9d  00000000  00000000  000137d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00063676  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000048c  00000000  00000000  000636bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00063b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006d4 	.word	0x080006d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080006d4 	.word	0x080006d4

080001d4 <LED_Init>:
#include "LED.h"

void LED_Init(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR	|= RCC_AHB1ENR_GPIOAEN;
 80001d8:	4b14      	ldr	r3, [pc, #80]	@ (800022c <LED_Init+0x58>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001dc:	4a13      	ldr	r2, [pc, #76]	@ (800022c <LED_Init+0x58>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER	&=~(3U<<10);  	// Clear mode bits for PA5
 80001e4:	4b12      	ldr	r3, [pc, #72]	@ (8000230 <LED_Init+0x5c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a11      	ldr	r2, [pc, #68]	@ (8000230 <LED_Init+0x5c>)
 80001ea:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001ee:	6013      	str	r3, [r2, #0]
    GPIOA->MODER	|= (1U<<10);   	// Set PA5 as output (01)
 80001f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000230 <LED_Init+0x5c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000230 <LED_Init+0x5c>)
 80001f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001fa:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER	&=~(1U<<5);     // Set PA5 as push-pull
 80001fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000230 <LED_Init+0x5c>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	4a0b      	ldr	r2, [pc, #44]	@ (8000230 <LED_Init+0x5c>)
 8000202:	f023 0320 	bic.w	r3, r3, #32
 8000206:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR	|= (3U<<10); 	// High speed for PA5
 8000208:	4b09      	ldr	r3, [pc, #36]	@ (8000230 <LED_Init+0x5c>)
 800020a:	689b      	ldr	r3, [r3, #8]
 800020c:	4a08      	ldr	r2, [pc, #32]	@ (8000230 <LED_Init+0x5c>)
 800020e:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000212:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR	&=~(3U<<10);  	// No pull-up/pull-down for PA5
 8000214:	4b06      	ldr	r3, [pc, #24]	@ (8000230 <LED_Init+0x5c>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	4a05      	ldr	r2, [pc, #20]	@ (8000230 <LED_Init+0x5c>)
 800021a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800021e:	60d3      	str	r3, [r2, #12]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40023800 	.word	0x40023800
 8000230:	40020000 	.word	0x40020000

08000234 <LED_On>:

void LED_On(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1<<5);
 8000238:	4b05      	ldr	r3, [pc, #20]	@ (8000250 <LED_On+0x1c>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	4a04      	ldr	r2, [pc, #16]	@ (8000250 <LED_On+0x1c>)
 800023e:	f043 0320 	orr.w	r3, r3, #32
 8000242:	6153      	str	r3, [r2, #20]
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40020000 	.word	0x40020000

08000254 <LED_Off>:

void LED_Off(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~(1<<5);
 8000258:	4b05      	ldr	r3, [pc, #20]	@ (8000270 <LED_Off+0x1c>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	4a04      	ldr	r2, [pc, #16]	@ (8000270 <LED_Off+0x1c>)
 800025e:	f023 0320 	bic.w	r3, r3, #32
 8000262:	6153      	str	r3, [r2, #20]
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	40020000 	.word	0x40020000

08000274 <SPI2_Init>:
 *		SPI2_SCK	- PB13
 *		SPI2_NSS	- PB12
 */

void SPI2_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port B
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000278:	4b16      	ldr	r3, [pc, #88]	@ (80002d4 <SPI2_Init+0x60>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027c:	4a15      	ldr	r2, [pc, #84]	@ (80002d4 <SPI2_Init+0x60>)
 800027e:	f043 0302 	orr.w	r3, r3, #2
 8000282:	6313      	str	r3, [r2, #48]	@ 0x30
    // Enable clock SPI2 peripheral
	RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8000284:	4b13      	ldr	r3, [pc, #76]	@ (80002d4 <SPI2_Init+0x60>)
 8000286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000288:	4a12      	ldr	r2, [pc, #72]	@ (80002d4 <SPI2_Init+0x60>)
 800028a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800028e:	6413      	str	r3, [r2, #64]	@ 0x40

	// Configure PB13, PB14, PB15 as Alternate Function for SPI2
	GPIOB->MODER &= ~(GPIO_MODER_MODE12 | GPIO_MODER_MODE13 | GPIO_MODER_MODE14 | GPIO_MODER_MODE15);
 8000290:	4b11      	ldr	r3, [pc, #68]	@ (80002d8 <SPI2_Init+0x64>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a10      	ldr	r2, [pc, #64]	@ (80002d8 <SPI2_Init+0x64>)
 8000296:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800029a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE12_0 | GPIO_MODER_MODE13_1 | GPIO_MODER_MODE14_1 | GPIO_MODER_MODE15_1);
 800029c:	4b0e      	ldr	r3, [pc, #56]	@ (80002d8 <SPI2_Init+0x64>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0d      	ldr	r2, [pc, #52]	@ (80002d8 <SPI2_Init+0x64>)
 80002a2:	f043 4329 	orr.w	r3, r3, #2835349504	@ 0xa9000000
 80002a6:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] |= ((5 << 20) | (5 << 24) | (5 << 28));
 80002a8:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <SPI2_Init+0x64>)
 80002aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002ac:	4a0a      	ldr	r2, [pc, #40]	@ (80002d8 <SPI2_Init+0x64>)
 80002ae:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80002b2:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80002b6:	6253      	str	r3, [r2, #36]	@ 0x24

	// Pull CS High
	SPI2_DeselectSlave();
 80002b8:	f000 f820 	bl	80002fc <SPI2_DeselectSlave>

	// Configure SPI2 in master mode, baud rate = fPCLK / 16, CPOL = 0, CPHA = 0, 8-bit data format
	SPI2->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_SSI | SPI_CR1_SSM;
 80002bc:	4b07      	ldr	r3, [pc, #28]	@ (80002dc <SPI2_Init+0x68>)
 80002be:	f44f 7245 	mov.w	r2, #788	@ 0x314
 80002c2:	601a      	str	r2, [r3, #0]
	// Enable SPI2
	SPI2->CR1 |= SPI_CR1_SPE;
 80002c4:	4b05      	ldr	r3, [pc, #20]	@ (80002dc <SPI2_Init+0x68>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a04      	ldr	r2, [pc, #16]	@ (80002dc <SPI2_Init+0x68>)
 80002ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002ce:	6013      	str	r3, [r2, #0]
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020400 	.word	0x40020400
 80002dc:	40003800 	.word	0x40003800

080002e0 <SPI2_SelectSlave>:

void SPI2_SelectSlave(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	// Pull CS low
	GPIOB->BSRR = (1 << 28);
 80002e4:	4b04      	ldr	r3, [pc, #16]	@ (80002f8 <SPI2_SelectSlave+0x18>)
 80002e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80002ea:	619a      	str	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40020400 	.word	0x40020400

080002fc <SPI2_DeselectSlave>:

void SPI2_DeselectSlave(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
    // Pull CS high
    GPIOB->BSRR = (1 << 12);
 8000300:	4b04      	ldr	r3, [pc, #16]	@ (8000314 <SPI2_DeselectSlave+0x18>)
 8000302:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000306:	619a      	str	r2, [r3, #24]
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40020400 	.word	0x40020400

08000318 <SPI2_TransmitReceiveByte>:

uint8_t SPI2_TransmitReceiveByte(uint8_t data)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
    // Wait until TXE (Transmit buffer empty)
    while(!(SPI2->SR & SPI_SR_TXE));
 8000322:	bf00      	nop
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <SPI2_TransmitReceiveByte+0x40>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	f003 0302 	and.w	r3, r3, #2
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0f9      	beq.n	8000324 <SPI2_TransmitReceiveByte+0xc>
    // Send data
    SPI2->DR = data;
 8000330:	4a09      	ldr	r2, [pc, #36]	@ (8000358 <SPI2_TransmitReceiveByte+0x40>)
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	60d3      	str	r3, [r2, #12]
    // Wait until RXNE (Receive buffer not empty)
    while(!(SPI2->SR & SPI_SR_RXNE));
 8000336:	bf00      	nop
 8000338:	4b07      	ldr	r3, [pc, #28]	@ (8000358 <SPI2_TransmitReceiveByte+0x40>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	f003 0301 	and.w	r3, r3, #1
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0f9      	beq.n	8000338 <SPI2_TransmitReceiveByte+0x20>
    // Return received data
    return (uint8_t)(SPI2->DR);
 8000344:	4b04      	ldr	r3, [pc, #16]	@ (8000358 <SPI2_TransmitReceiveByte+0x40>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	b2db      	uxtb	r3, r3
}
 800034a:	4618      	mov	r0, r3
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40003800 	.word	0x40003800

0800035c <SPI2_TransmitReceive_MultiByte>:

void SPI2_TransmitReceive_MultiByte(uint8_t *txData, uint8_t *rxData, uint16_t size)
{
 800035c:	b480      	push	{r7}
 800035e:	b087      	sub	sp, #28
 8000360:	af00      	add	r7, sp, #0
 8000362:	60f8      	str	r0, [r7, #12]
 8000364:	60b9      	str	r1, [r7, #8]
 8000366:	4613      	mov	r3, r2
 8000368:	80fb      	strh	r3, [r7, #6]
    uint16_t i = 0;
 800036a:	2300      	movs	r3, #0
 800036c:	82fb      	strh	r3, [r7, #22]
    while (i < size)
 800036e:	e021      	b.n	80003b4 <SPI2_TransmitReceive_MultiByte+0x58>
    {
        // Wait until TXE (Transmit buffer empty)
        while (!(SPI2->SR & SPI_SR_TXE));
 8000370:	bf00      	nop
 8000372:	4b16      	ldr	r3, [pc, #88]	@ (80003cc <SPI2_TransmitReceive_MultiByte+0x70>)
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	f003 0302 	and.w	r3, r3, #2
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0f9      	beq.n	8000372 <SPI2_TransmitReceive_MultiByte+0x16>
        // Transmit data
        SPI2->DR = txData[i];
 800037e:	8afb      	ldrh	r3, [r7, #22]
 8000380:	68fa      	ldr	r2, [r7, #12]
 8000382:	4413      	add	r3, r2
 8000384:	781a      	ldrb	r2, [r3, #0]
 8000386:	4b11      	ldr	r3, [pc, #68]	@ (80003cc <SPI2_TransmitReceive_MultiByte+0x70>)
 8000388:	60da      	str	r2, [r3, #12]
        // Wait until RXNE (Receive buffer not empty)
        while (!(SPI2->SR & SPI_SR_RXNE));
 800038a:	bf00      	nop
 800038c:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <SPI2_TransmitReceive_MultiByte+0x70>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	f003 0301 	and.w	r3, r3, #1
 8000394:	2b00      	cmp	r3, #0
 8000396:	d0f9      	beq.n	800038c <SPI2_TransmitReceive_MultiByte+0x30>
        // Read received data, even if rxData is NULL (to clear RXNE flag)
        uint8_t receivedByte = (uint8_t)(SPI2->DR);
 8000398:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <SPI2_TransmitReceive_MultiByte+0x70>)
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	757b      	strb	r3, [r7, #21]
        // Store received data only if rxData is not NULL
        if (rxData != NULL)
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d004      	beq.n	80003ae <SPI2_TransmitReceive_MultiByte+0x52>
        {
            rxData[i] = receivedByte;
 80003a4:	8afb      	ldrh	r3, [r7, #22]
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	4413      	add	r3, r2
 80003aa:	7d7a      	ldrb	r2, [r7, #21]
 80003ac:	701a      	strb	r2, [r3, #0]
        }
        i++;
 80003ae:	8afb      	ldrh	r3, [r7, #22]
 80003b0:	3301      	adds	r3, #1
 80003b2:	82fb      	strh	r3, [r7, #22]
    while (i < size)
 80003b4:	8afa      	ldrh	r2, [r7, #22]
 80003b6:	88fb      	ldrh	r3, [r7, #6]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d3d9      	bcc.n	8000370 <SPI2_TransmitReceive_MultiByte+0x14>
    }
}
 80003bc:	bf00      	nop
 80003be:	bf00      	nop
 80003c0:	371c      	adds	r7, #28
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40003800 	.word	0x40003800

080003d0 <delay_ms>:
#include "SYSTICK.h"

void delay_ms(uint32_t ms)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	SysTick->CTRL |= (1<<0) | (1<<2) ;
 80003d8:	4b13      	ldr	r3, [pc, #76]	@ (8000428 <delay_ms+0x58>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a12      	ldr	r2, [pc, #72]	@ (8000428 <delay_ms+0x58>)
 80003de:	f043 0305 	orr.w	r3, r3, #5
 80003e2:	6013      	str	r3, [r2, #0]
	SysTick->LOAD  = 15999;
 80003e4:	4b10      	ldr	r3, [pc, #64]	@ (8000428 <delay_ms+0x58>)
 80003e6:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80003ea:	605a      	str	r2, [r3, #4]
	for(i=0; i<ms; i++)
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	e009      	b.n	8000406 <delay_ms+0x36>
	{
		while(!(SysTick->CTRL & (1<<16)));
 80003f2:	bf00      	nop
 80003f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <delay_ms+0x58>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0f9      	beq.n	80003f4 <delay_ms+0x24>
	for(i=0; i<ms; i++)
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	3301      	adds	r3, #1
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	68fa      	ldr	r2, [r7, #12]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	429a      	cmp	r2, r3
 800040c:	d3f1      	bcc.n	80003f2 <delay_ms+0x22>
	}
	SysTick->CTRL &=~(1U<<0) ;
 800040e:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <delay_ms+0x58>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a05      	ldr	r2, [pc, #20]	@ (8000428 <delay_ms+0x58>)
 8000414:	f023 0301 	bic.w	r3, r3, #1
 8000418:	6013      	str	r3, [r2, #0]
}
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	e000e010 	.word	0xe000e010

0800042c <Compute_UART_Baud>:
#define APB1_CLK		SYS_FREQ

void UART2_Write(int ch);

static uint16_t Compute_UART_Baud(uint32_t periph_clk, uint32_t baudrate)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	085a      	lsrs	r2, r3, #1
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	441a      	add	r2, r3
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	fbb2 f3f3 	udiv	r3, r2, r3
 8000444:	b29b      	uxth	r3, r3
}
 8000446:	4618      	mov	r0, r3
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
	...

08000454 <UART2_SetBaudRate>:

static void UART2_SetBaudRate(uint32_t periph_clk, uint32_t baudrate)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
	USART2->BRR = Compute_UART_Baud(periph_clk,baudrate);
 800045e:	6839      	ldr	r1, [r7, #0]
 8000460:	6878      	ldr	r0, [r7, #4]
 8000462:	f7ff ffe3 	bl	800042c <Compute_UART_Baud>
 8000466:	4603      	mov	r3, r0
 8000468:	461a      	mov	r2, r3
 800046a:	4b03      	ldr	r3, [pc, #12]	@ (8000478 <UART2_SetBaudRate+0x24>)
 800046c:	609a      	str	r2, [r3, #8]
}
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40004400 	.word	0x40004400

0800047c <UART2_Init>:

void UART2_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000480:	4b18      	ldr	r3, [pc, #96]	@ (80004e4 <UART2_Init+0x68>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000484:	4a17      	ldr	r2, [pc, #92]	@ (80004e4 <UART2_Init+0x68>)
 8000486:	f043 0301 	orr.w	r3, r3, #1
 800048a:	6313      	str	r3, [r2, #48]	@ 0x30
	/*Enable clock access to UART2*/
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800048c:	4b15      	ldr	r3, [pc, #84]	@ (80004e4 <UART2_Init+0x68>)
 800048e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000490:	4a14      	ldr	r2, [pc, #80]	@ (80004e4 <UART2_Init+0x68>)
 8000492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000496:	6413      	str	r3, [r2, #64]	@ 0x40
	/*Set PA2 mode to alternate function mode */
	GPIOA->MODER &=~(1U<<4);
 8000498:	4b13      	ldr	r3, [pc, #76]	@ (80004e8 <UART2_Init+0x6c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a12      	ldr	r2, [pc, #72]	@ (80004e8 <UART2_Init+0x6c>)
 800049e:	f023 0310 	bic.w	r3, r3, #16
 80004a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 80004a4:	4b10      	ldr	r3, [pc, #64]	@ (80004e8 <UART2_Init+0x6c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a0f      	ldr	r2, [pc, #60]	@ (80004e8 <UART2_Init+0x6c>)
 80004aa:	f043 0320 	orr.w	r3, r3, #32
 80004ae:	6013      	str	r3, [r2, #0]
	/*Set PA2 alternate function type to UART_TX(AF07)*/
	GPIOA->AFR[0] |=(0x7<<8);
 80004b0:	4b0d      	ldr	r3, [pc, #52]	@ (80004e8 <UART2_Init+0x6c>)
 80004b2:	6a1b      	ldr	r3, [r3, #32]
 80004b4:	4a0c      	ldr	r2, [pc, #48]	@ (80004e8 <UART2_Init+0x6c>)
 80004b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80004ba:	6213      	str	r3, [r2, #32]
	/*Configure Baud Rate*/
	UART2_SetBaudRate(APB1_CLK,UART_BAUDRATE);
 80004bc:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80004c0:	480a      	ldr	r0, [pc, #40]	@ (80004ec <UART2_Init+0x70>)
 80004c2:	f7ff ffc7 	bl	8000454 <UART2_SetBaudRate>
	/*Configure the Transfer directions*/
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);
 80004c6:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <UART2_Init+0x74>)
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	4a09      	ldr	r2, [pc, #36]	@ (80004f0 <UART2_Init+0x74>)
 80004cc:	f043 030c 	orr.w	r3, r3, #12
 80004d0:	60d3      	str	r3, [r2, #12]
	/*Enable UART module*/
	USART2->CR1 |= USART_CR1_UE;
 80004d2:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <UART2_Init+0x74>)
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <UART2_Init+0x74>)
 80004d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004dc:	60d3      	str	r3, [r2, #12]
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40023800 	.word	0x40023800
 80004e8:	40020000 	.word	0x40020000
 80004ec:	00f42400 	.word	0x00f42400
 80004f0:	40004400 	.word	0x40004400

080004f4 <W25Q_WriteEnable>:
#include "W25Qxx.h"

static void W25Q_WriteEnable(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	SPI2_SelectSlave();
 80004f8:	f7ff fef2 	bl	80002e0 <SPI2_SelectSlave>
	SPI2_TransmitReceiveByte(ENABLE_WRITE);
 80004fc:	2006      	movs	r0, #6
 80004fe:	f7ff ff0b 	bl	8000318 <SPI2_TransmitReceiveByte>
	SPI2_DeselectSlave();
 8000502:	f7ff fefb 	bl	80002fc <SPI2_DeselectSlave>
	delay_ms(10);
 8000506:	200a      	movs	r0, #10
 8000508:	f7ff ff62 	bl	80003d0 <delay_ms>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}

08000510 <W25Q_WriteDisable>:

static void W25Q_WriteDisable(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	SPI2_SelectSlave();
 8000514:	f7ff fee4 	bl	80002e0 <SPI2_SelectSlave>
	SPI2_TransmitReceiveByte(DISABLE_WRITE);
 8000518:	2004      	movs	r0, #4
 800051a:	f7ff fefd 	bl	8000318 <SPI2_TransmitReceiveByte>
	SPI2_DeselectSlave();
 800051e:	f7ff feed 	bl	80002fc <SPI2_DeselectSlave>
	delay_ms(10);
 8000522:	200a      	movs	r0, #10
 8000524:	f7ff ff54 	bl	80003d0 <delay_ms>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}

0800052c <W25Q_Reset>:

static void W25Q_Reset(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	SPI2_SelectSlave();
 8000530:	f7ff fed6 	bl	80002e0 <SPI2_SelectSlave>
	SPI2_TransmitReceiveByte(ENABLE_RESET);
 8000534:	2066      	movs	r0, #102	@ 0x66
 8000536:	f7ff feef 	bl	8000318 <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte(EXECUTE_RESET);
 800053a:	2099      	movs	r0, #153	@ 0x99
 800053c:	f7ff feec 	bl	8000318 <SPI2_TransmitReceiveByte>
	SPI2_DeselectSlave();
 8000540:	f7ff fedc 	bl	80002fc <SPI2_DeselectSlave>
	delay_ms(100);
 8000544:	2064      	movs	r0, #100	@ 0x64
 8000546:	f7ff ff43 	bl	80003d0 <delay_ms>
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}

0800054e <W25Q_Init>:

void W25Q_Init(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0
	SPI2_Init();
 8000552:	f7ff fe8f 	bl	8000274 <SPI2_Init>
	W25Q_Reset();
 8000556:	f7ff ffe9 	bl	800052c <W25Q_Reset>
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}

0800055e <W25Q_WritePage>:
	}
	SPI2_DeselectSlave();
}

void W25Q_WritePage(uint32_t startPage, uint16_t offset, uint32_t size, uint8_t *data)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b086      	sub	sp, #24
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	607a      	str	r2, [r7, #4]
 8000568:	603b      	str	r3, [r7, #0]
 800056a:	460b      	mov	r3, r1
 800056c:	817b      	strh	r3, [r7, #10]

	uint32_t memAddress = (startPage * 256) + offset;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	021a      	lsls	r2, r3, #8
 8000572:	897b      	ldrh	r3, [r7, #10]
 8000574:	4413      	add	r3, r2
 8000576:	617b      	str	r3, [r7, #20]
	W25Q_WriteEnable();
 8000578:	f7ff ffbc 	bl	80004f4 <W25Q_WriteEnable>
	SPI2_SelectSlave();
 800057c:	f7ff feb0 	bl	80002e0 <SPI2_SelectSlave>
	SPI2_TransmitReceiveByte(PAGE_WRITE);
 8000580:	2002      	movs	r0, #2
 8000582:	f7ff fec9 	bl	8000318 <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte((memAddress >> 16) & 0xFF);
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	0c1b      	lsrs	r3, r3, #16
 800058a:	b2db      	uxtb	r3, r3
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff fec3 	bl	8000318 <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte((memAddress >> 8) & 0xFF);
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	b2db      	uxtb	r3, r3
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff febd 	bl	8000318 <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceiveByte((memAddress) & 0xFF);
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff feb8 	bl	8000318 <SPI2_TransmitReceiveByte>
	SPI2_TransmitReceive_MultiByte(data, NULL, size);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	461a      	mov	r2, r3
 80005ae:	2100      	movs	r1, #0
 80005b0:	6838      	ldr	r0, [r7, #0]
 80005b2:	f7ff fed3 	bl	800035c <SPI2_TransmitReceive_MultiByte>
	SPI2_DeselectSlave();
 80005b6:	f7ff fea1 	bl	80002fc <SPI2_DeselectSlave>
	W25Q_WriteDisable();
 80005ba:	f7ff ffa9 	bl	8000510 <W25Q_WriteDisable>
	delay_ms(5);
 80005be:	2005      	movs	r0, #5
 80005c0:	f7ff ff06 	bl	80003d0 <delay_ms>
}
 80005c4:	bf00      	nop
 80005c6:	3718      	adds	r7, #24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <main>:
#include "LED.h"
#include "UART.h"
#include "W25Qxx.h"

int main()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	@ 0x50
 80005d0:	af00      	add	r7, sp, #0
	uint8_t buf[76] ="WELL, IT JUST SO HAPPENS THAT WE ARE EXPERTS AT EXTERMINATING SHITBAG SUPES.";
 80005d2:	4a11      	ldr	r2, [pc, #68]	@ (8000618 <main+0x4c>)
 80005d4:	463b      	mov	r3, r7
 80005d6:	4611      	mov	r1, r2
 80005d8:	224c      	movs	r2, #76	@ 0x4c
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f86c 	bl	80006b8 <memcpy>
	W25Q_Init();
 80005e0:	f7ff ffb5 	bl	800054e <W25Q_Init>
	LED_Init();
 80005e4:	f7ff fdf6 	bl	80001d4 <LED_Init>
	UART2_Init();
 80005e8:	f7ff ff48 	bl	800047c <UART2_Init>

	LED_On();
 80005ec:	f7ff fe22 	bl	8000234 <LED_On>
	for(int i = 0; i < 16; i++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80005f4:	e008      	b.n	8000608 <main+0x3c>
	{
		W25Q_WritePage(i, 0, 76, buf);
 80005f6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80005f8:	463b      	mov	r3, r7
 80005fa:	224c      	movs	r2, #76	@ 0x4c
 80005fc:	2100      	movs	r1, #0
 80005fe:	f7ff ffae 	bl	800055e <W25Q_WritePage>
	for(int i = 0; i < 16; i++)
 8000602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000604:	3301      	adds	r3, #1
 8000606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800060a:	2b0f      	cmp	r3, #15
 800060c:	ddf3      	ble.n	80005f6 <main+0x2a>
	}
	LED_Off();
 800060e:	f7ff fe21 	bl	8000254 <LED_Off>



	while(1)
 8000612:	bf00      	nop
 8000614:	e7fd      	b.n	8000612 <main+0x46>
 8000616:	bf00      	nop
 8000618:	080006ec 	.word	0x080006ec

0800061c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800061c:	480d      	ldr	r0, [pc, #52]	@ (8000654 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800061e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000620:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000624:	480c      	ldr	r0, [pc, #48]	@ (8000658 <LoopForever+0x6>)
  ldr r1, =_edata
 8000626:	490d      	ldr	r1, [pc, #52]	@ (800065c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000628:	4a0d      	ldr	r2, [pc, #52]	@ (8000660 <LoopForever+0xe>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800062c:	e002      	b.n	8000634 <LoopCopyDataInit>

0800062e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000632:	3304      	adds	r3, #4

08000634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000638:	d3f9      	bcc.n	800062e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063a:	4a0a      	ldr	r2, [pc, #40]	@ (8000664 <LoopForever+0x12>)
  ldr r4, =_ebss
 800063c:	4c0a      	ldr	r4, [pc, #40]	@ (8000668 <LoopForever+0x16>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000640:	e001      	b.n	8000646 <LoopFillZerobss>

08000642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000644:	3204      	adds	r2, #4

08000646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000648:	d3fb      	bcc.n	8000642 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800064a:	f000 f811 	bl	8000670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064e:	f7ff ffbd 	bl	80005cc <main>

08000652 <LoopForever>:

LoopForever:
  b LoopForever
 8000652:	e7fe      	b.n	8000652 <LoopForever>
  ldr   r0, =_estack
 8000654:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800065c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000660:	08000740 	.word	0x08000740
  ldr r2, =_sbss
 8000664:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000668:	2000001c 	.word	0x2000001c

0800066c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800066c:	e7fe      	b.n	800066c <ADC_IRQHandler>
	...

08000670 <__libc_init_array>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	4d0d      	ldr	r5, [pc, #52]	@ (80006a8 <__libc_init_array+0x38>)
 8000674:	4c0d      	ldr	r4, [pc, #52]	@ (80006ac <__libc_init_array+0x3c>)
 8000676:	1b64      	subs	r4, r4, r5
 8000678:	10a4      	asrs	r4, r4, #2
 800067a:	2600      	movs	r6, #0
 800067c:	42a6      	cmp	r6, r4
 800067e:	d109      	bne.n	8000694 <__libc_init_array+0x24>
 8000680:	4d0b      	ldr	r5, [pc, #44]	@ (80006b0 <__libc_init_array+0x40>)
 8000682:	4c0c      	ldr	r4, [pc, #48]	@ (80006b4 <__libc_init_array+0x44>)
 8000684:	f000 f826 	bl	80006d4 <_init>
 8000688:	1b64      	subs	r4, r4, r5
 800068a:	10a4      	asrs	r4, r4, #2
 800068c:	2600      	movs	r6, #0
 800068e:	42a6      	cmp	r6, r4
 8000690:	d105      	bne.n	800069e <__libc_init_array+0x2e>
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f855 3b04 	ldr.w	r3, [r5], #4
 8000698:	4798      	blx	r3
 800069a:	3601      	adds	r6, #1
 800069c:	e7ee      	b.n	800067c <__libc_init_array+0xc>
 800069e:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a2:	4798      	blx	r3
 80006a4:	3601      	adds	r6, #1
 80006a6:	e7f2      	b.n	800068e <__libc_init_array+0x1e>
 80006a8:	08000738 	.word	0x08000738
 80006ac:	08000738 	.word	0x08000738
 80006b0:	08000738 	.word	0x08000738
 80006b4:	0800073c 	.word	0x0800073c

080006b8 <memcpy>:
 80006b8:	440a      	add	r2, r1
 80006ba:	4291      	cmp	r1, r2
 80006bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80006c0:	d100      	bne.n	80006c4 <memcpy+0xc>
 80006c2:	4770      	bx	lr
 80006c4:	b510      	push	{r4, lr}
 80006c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80006ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80006ce:	4291      	cmp	r1, r2
 80006d0:	d1f9      	bne.n	80006c6 <memcpy+0xe>
 80006d2:	bd10      	pop	{r4, pc}

080006d4 <_init>:
 80006d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d6:	bf00      	nop
 80006d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006da:	bc08      	pop	{r3}
 80006dc:	469e      	mov	lr, r3
 80006de:	4770      	bx	lr

080006e0 <_fini>:
 80006e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e2:	bf00      	nop
 80006e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006e6:	bc08      	pop	{r3}
 80006e8:	469e      	mov	lr, r3
 80006ea:	4770      	bx	lr
